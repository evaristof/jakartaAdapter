public class HttpServletRequestAdapter implements javax.servlet.http.HttpServletRequest {

    private final jakarta.servlet.http.HttpServletRequest jakartaRequest;

    public HttpServletRequestAdapter(jakarta.servlet.http.HttpServletRequest jakartaRequest) {
        this.jakartaRequest = jakartaRequest;
    }

    @Override
    public String getAuthType() {
        return jakartaRequest.getAuthType();
    }

    @Override
    public Cookie[] getCookies() {
        jakarta.servlet.http.Cookie[] jakartaCookies = jakartaRequest.getCookies();
        if (jakartaCookies == null) return null;
        Cookie[] javaxCookies = new Cookie[jakartaCookies.length];
        for (int i = 0; i < jakartaCookies.length; i++) {
            jakarta.servlet.http.Cookie jc = jakartaCookies[i];
            Cookie c = new Cookie(jc.getName(), jc.getValue());
            c.setPath(jc.getPath());
            c.setDomain(jc.getDomain());
            c.setSecure(jc.getSecure());
            c.setHttpOnly(jc.isHttpOnly());
            c.setMaxAge(jc.getMaxAge());
            javaxCookies[i] = c;
        }
        return javaxCookies;
    }

    @Override
    public long getDateHeader(String name) {
        return jakartaRequest.getDateHeader(name);
    }

    @Override
    public String getHeader(String name) {
        return jakartaRequest.getHeader(name);
    }

    @Override
    public Enumeration<String> getHeaders(String name) {
        return jakartaRequest.getHeaders(name);
    }

    @Override
    public Enumeration<String> getHeaderNames() {
        return jakartaRequest.getHeaderNames();
    }

    @Override
    public int getIntHeader(String name) {
        return jakartaRequest.getIntHeader(name);
    }

    @Override
    public String getMethod() {
        return jakartaRequest.getMethod();
    }

    @Override
    public String getPathInfo() {
        return jakartaRequest.getPathInfo();
    }

    @Override
    public String getPathTranslated() {
        return jakartaRequest.getPathTranslated();
    }

    @Override
    public String getContextPath() {
        return jakartaRequest.getContextPath();
    }

    @Override
    public String getQueryString() {
        return jakartaRequest.getQueryString();
    }

    @Override
    public String getRemoteUser() {
        return jakartaRequest.getRemoteUser();
    }

    @Override
    public boolean isUserInRole(String role) {
        return jakartaRequest.isUserInRole(role);
    }

    @Override
    public java.security.Principal getUserPrincipal() {
        return jakartaRequest.getUserPrincipal();
    }

    @Override
    public String getRequestedSessionId() {
        return jakartaRequest.getRequestedSessionId();
    }

    @Override
    public String getRequestURI() {
        return jakartaRequest.getRequestURI();
    }

    @Override
    public StringBuffer getRequestURL() {
        return jakartaRequest.getRequestURL();
    }

    @Override
    public String getServletPath() {
        return jakartaRequest.getServletPath();
    }

    @Override
    public javax.servlet.http.HttpSession getSession(boolean create) {
        throw new UnsupportedOperationException("HttpSession adapter not implemented.");
    }

    @Override
    public javax.servlet.http.HttpSession getSession() {
        throw new UnsupportedOperationException("HttpSession adapter not implemented.");
    }

    @Override
    public String changeSessionId() {
        throw new UnsupportedOperationException("Session management not implemented.");
    }

    @Override
    public boolean isRequestedSessionIdValid() {
        return jakartaRequest.isRequestedSessionIdValid();
    }

    @Override
    public boolean isRequestedSessionIdFromCookie() {
        return jakartaRequest.isRequestedSessionIdFromCookie();
    }

    @Override
    public boolean isRequestedSessionIdFromURL() {
        return jakartaRequest.isRequestedSessionIdFromURL();
    }

    @Override
    public boolean isRequestedSessionIdFromUrl() {
        return jakartaRequest.isRequestedSessionIdFromUrl();
    }

    @Override
    public Object getAttribute(String name) {
        return jakartaRequest.getAttribute(name);
    }

    @Override
    public Enumeration<String> getAttributeNames() {
        return jakartaRequest.getAttributeNames();
    }

    @Override
    public String getCharacterEncoding() {
        return jakartaRequest.getCharacterEncoding();
    }

    @Override
    public void setCharacterEncoding(String env) {
        try {
            jakartaRequest.setCharacterEncoding(env);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public int getContentLength() {
        return jakartaRequest.getContentLength();
    }

    @Override
    public long getContentLengthLong() {
        return jakartaRequest.getContentLengthLong();
    }

    @Override
    public String getContentType() {
        return jakartaRequest.getContentType();
    }

    @Override
    public ServletInputStream getInputStream() {
        throw new UnsupportedOperationException("InputStream adapter not implemented.");
    }

    @Override
    public String getParameter(String name) {
        return jakartaRequest.getParameter(name);
    }

    @Override
    public Enumeration<String> getParameterNames() {
        return jakartaRequest.getParameterNames();
    }

    @Override
    public String[] getParameterValues(String name) {
        return jakartaRequest.getParameterValues(name);
    }

    @Override
    public Map<String, String[]> getParameterMap() {
        return jakartaRequest.getParameterMap();
    }

    @Override
    public String getProtocol() {
        return jakartaRequest.getProtocol();
    }

    @Override
    public String getScheme() {
        return jakartaRequest.getScheme();
    }

    @Override
    public String getServerName() {
        return jakartaRequest.getServerName();
    }

    @Override
    public int getServerPort() {
        return jakartaRequest.getServerPort();
    }

    @Override
    public BufferedReader getReader() {
        throw new UnsupportedOperationException("Reader adapter not implemented.");
    }

    @Override
    public String getRemoteAddr() {
        return jakartaRequest.getRemoteAddr();
    }

    @Override
    public String getRemoteHost() {
        return jakartaRequest.getRemoteHost();
    }

    @Override
    public void setAttribute(String name, Object o) {
        jakartaRequest.setAttribute(name, o);
    }

    @Override
    public void removeAttribute(String name) {
        jakartaRequest.removeAttribute(name);
    }

    @Override
    public Locale getLocale() {
        return jakartaRequest.getLocale();
    }

    @Override
    public Enumeration<Locale> getLocales() {
        return jakartaRequest.getLocales();
    }

    @Override
    public boolean isSecure() {
        return jakartaRequest.isSecure();
    }

    @Override
    public RequestDispatcher getRequestDispatcher(String path) {
        throw new UnsupportedOperationException("RequestDispatcher not implemented.");
    }

    @Override
    public String getRealPath(String path) {
        return jakartaRequest.getRealPath(path);
    }

    @Override
    public int getRemotePort() {
        return jakartaRequest.getRemotePort();
    }

    @Override
    public String getLocalName() {
        return jakartaRequest.getLocalName();
    }

    @Override
    public String getLocalAddr() {
        return jakartaRequest.getLocalAddr();
    }

    @Override
    public int getLocalPort() {
        return jakartaRequest.getLocalPort();
    }

    @Override
    public ServletContext getServletContext() {
        return new ServletContextAdapter(jakartaRequest.getServletContext());
    }

    @Override
    public AsyncContext startAsync() {
        throw new UnsupportedOperationException("AsyncContext not implemented.");
    }

    @Override
    public AsyncContext startAsync(ServletRequest servletRequest, ServletResponse servletResponse) {
        throw new UnsupportedOperationException("AsyncContext not implemented.");
    }

    @Override
    public boolean isAsyncStarted() {
        return jakartaRequest.isAsyncStarted();
    }

    @Override
    public boolean isAsyncSupported() {
        return jakartaRequest.isAsyncSupported();
    }

    @Override
    public AsyncContext getAsyncContext() {
        throw new UnsupportedOperationException("AsyncContext not implemented.");
    }

    @Override
    public DispatcherType getDispatcherType() {
        return jakartaRequest.getDispatcherType();
    }
	
	@Override
	public boolean authenticate(javax.servlet.http.HttpServletResponse response) 
        throws IOException, ServletException {
    if (response instanceof HttpServletResponseAdapter) {
        jakarta.servlet.http.HttpServletResponse jakartaResponse = 
            ((HttpServletResponseAdapter) response).getJakartaResponse();
        return jakartaRequest.authenticate(jakartaResponse);
    } else {
        throw new IllegalArgumentException("Response must be an instance of HttpServletResponseAdapter");
    }
	
	@Override
public javax.servlet.http.Part getPart(String name) throws IOException, ServletException {
    jakarta.servlet.http.Part jakartaPart = jakartaRequest.getPart(name);
    return new PartAdapter(jakartaPart); // You must create this adapter too.
}
	@Override
public Collection<javax.servlet.http.Part> getParts() throws IOException, ServletException {
    Collection<jakarta.servlet.http.Part> jakartaParts = jakartaRequest.getParts();
    List<javax.servlet.http.Part> parts = new ArrayList<>();
    for (jakarta.servlet.http.Part jakartaPart : jakartaParts) {
        parts.add(new PartAdapter(jakartaPart)); // You must implement PartAdapter
    }
    return parts;
}
	@Override
public void login(String username, String password) throws ServletException {
    jakartaRequest.login(username, password);
}
@Override
public void logout() throws ServletException {
    jakartaRequest.logout();
}

@Override
public <T extends javax.servlet.http.HttpUpgradeHandler> T upgrade(Class<T> httpUpgradeHandlerClass)
        throws IOException, ServletException {
    // Note: You'd likely need an adapter for the HttpUpgradeHandler too
    throw new UnsupportedOperationException("Upgrade not implemented in adapter.");
}
}
