import jakarta.servlet.ServletContext;

import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Enumeration;
import java.util.EventListener;
import java.util.Map;
import java.util.Set;

/**
 * Adapter to bridge jakarta.servlet.ServletContext to javax.servlet.ServletContext
 */
public class ServletContextAdapter implements javax.servlet.ServletContext {

    private final ServletContext jakartaContext;

    public ServletContextAdapter(ServletContext jakartaContext) {
        this.jakartaContext = jakartaContext;
    }

    @Override
    public String getContextPath() {
        return jakartaContext.getContextPath();
    }

    @Override
    public javax.servlet.ServletContext getContext(String uripath) {
        // Cross-context not supported in Jakarta/Javax bridge
        throw new UnsupportedOperationException("getContext not supported in adapter");
    }

    @Override
    public int getMajorVersion() {
        return jakartaContext.getMajorVersion();
    }

    @Override
    public int getMinorVersion() {
        return jakartaContext.getMinorVersion();
    }

    @Override
    public int getEffectiveMajorVersion() {
        return jakartaContext.getEffectiveMajorVersion();
    }

    @Override
    public int getEffectiveMinorVersion() {
        return jakartaContext.getEffectiveMinorVersion();
    }

    @Override
    public String getMimeType(String file) {
        return jakartaContext.getMimeType(file);
    }

    @Override
    public Set<String> getResourcePaths(String path) {
        return jakartaContext.getResourcePaths(path);
    }

    @Override
    public URL getResource(String path) throws MalformedURLException {
        return jakartaContext.getResource(path);
    }

    @Override
    public InputStream getResourceAsStream(String path) {
        return jakartaContext.getResourceAsStream(path);
    }

    @Override
    public String getRealPath(String path) {
        return jakartaContext.getRealPath(path);
    }

    @Override
    public RequestDispatcher getRequestDispatcher(String path) {
        // Cannot adapt jakarta RequestDispatcher to javax
        throw new UnsupportedOperationException("getRequestDispatcher not supported in adapter");
    }

    @Override
    public RequestDispatcher getNamedDispatcher(String name) {
        throw new UnsupportedOperationException("getNamedDispatcher not supported in adapter");
    }

    @Override
    public Servlet getServlet(String name) {
        throw new UnsupportedOperationException("Deprecated getServlet not supported.");
    }

    @Override
    public Enumeration<Servlet> getServlets() {
        throw new UnsupportedOperationException("Deprecated getServlets not supported.");
    }

    @Override
    public Enumeration<String> getServletNames() {
        throw new UnsupportedOperationException("Deprecated getServletNames not supported.");
    }

    @Override
    public void log(String msg) {
        jakartaContext.log(msg);
    }

    @Override
    public void log(Exception exception, String msg) {
        jakartaContext.log(msg, exception);
    }

    @Override
    public void log(String message, Throwable throwable) {
        jakartaContext.log(message, throwable);
    }

    @Override
    public String getServerInfo() {
        return jakartaContext.getServerInfo();
    }

    @Override
    public String getInitParameter(String name) {
        return jakartaContext.getInitParameter(name);
    }

    @Override
    public Enumeration<String> getInitParameterNames() {
        return jakartaContext.getInitParameterNames();
    }

    @Override
    public boolean setInitParameter(String name, String value) {
        return jakartaContext.setInitParameter(name, value);
    }

    @Override
    public Object getAttribute(String name) {
        return jakartaContext.getAttribute(name);
    }

    @Override
    public Enumeration<String> getAttributeNames() {
        return jakartaContext.getAttributeNames();
    }

    @Override
    public void setAttribute(String name, Object object) {
        jakartaContext.setAttribute(name, object);
    }

    @Override
    public void removeAttribute(String name) {
        jakartaContext.removeAttribute(name);
    }

    @Override
    public String getServletContextName() {
        return jakartaContext.getServletContextName();
    }

    @Override
    public javax.servlet.descriptor.JspConfigDescriptor getJspConfigDescriptor() {
        // Not supported in simple adapter
        return null;
    }

    @Override
    public ClassLoader getClassLoader() {
        return jakartaContext.getClassLoader();
    }

    @Override
    public void declareRoles(String... roleNames) {
        jakartaContext.declareRoles(roleNames);
    }

    @Override
    public String getVirtualServerName() {
        return jakartaContext.getVirtualServerName();
    }

    // Dynamic registration methods not implemented
    @Override
    public javax.servlet.ServletRegistration.Dynamic addServlet(String servletName, String className) {
        throw new UnsupportedOperationException("Dynamic servlet registration not supported.");
    }

    @Override
    public javax.servlet.ServletRegistration.Dynamic addServlet(String servletName, Servlet servlet) {
        throw new UnsupportedOperationException("Dynamic servlet registration not supported.");
    }

    @Override
    public javax.servlet.ServletRegistration.Dynamic addServlet(String servletName, Class<? extends Servlet> servletClass) {
        throw new UnsupportedOperationException("Dynamic servlet registration not supported.");
    }

    @Override
    public <T extends Servlet> T createServlet(Class<T> clazz) {
        throw new UnsupportedOperationException("Dynamic servlet creation not supported.");
    }

    @Override
    public javax.servlet.ServletRegistration getServletRegistration(String servletName) {
        throw new UnsupportedOperationException("Dynamic servlet registration not supported.");
    }

    @Override
    public Map<String, ? extends javax.servlet.ServletRegistration> getServletRegistrations() {
        throw new UnsupportedOperationException("Dynamic servlet registration not supported.");
    }

    @Override
    public javax.servlet.FilterRegistration.Dynamic addFilter(String filterName, String className) {
        throw new UnsupportedOperationException("Dynamic filter registration not supported.");
    }

    @Override
    public javax.servlet.FilterRegistration.Dynamic addFilter(String filterName, Filter filter) {
        throw new UnsupportedOperationException("Dynamic filter registration not supported.");
    }

    @Override
    public javax.servlet.FilterRegistration.Dynamic addFilter(String filterName, Class<? extends Filter> filterClass) {
        throw new UnsupportedOperationException("Dynamic filter registration not supported.");
    }

    @Override
    public <T extends Filter> T createFilter(Class<T> clazz) {
        throw new UnsupportedOperationException("Dynamic filter creation not supported.");
    }

    @Override
    public javax.servlet.FilterRegistration getFilterRegistration(String filterName) {
        throw new UnsupportedOperationException("Dynamic filter registration not supported.");
    }

    @Override
    public Map<String, ? extends javax.servlet.FilterRegistration> getFilterRegistrations() {
        throw new UnsupportedOperationException("Dynamic filter registration not supported.");
    }

    @Override
    public SessionCookieConfig getSessionCookieConfig() {
        throw new UnsupportedOperationException("SessionCookieConfig not supported.");
    }

    @Override
    public void setSessionTrackingModes(Set<SessionTrackingMode> sessionTrackingModes) {
        throw new UnsupportedOperationException("Session tracking modes not supported.");
    }

    @Override
    public Set<SessionTrackingMode> getDefaultSessionTrackingModes() {
        throw new UnsupportedOperationException("Session tracking modes not supported.");
    }

    @Override
    public Set<SessionTrackingMode> getEffectiveSessionTrackingModes() {
        throw new UnsupportedOperationException("Session tracking modes not supported.");
    }

    @Override
    public void addListener(String className) {
        throw new UnsupportedOperationException("Dynamic listener registration not supported.");
    }

    @Override
    public <T extends EventListener> void addListener(T t) {
        throw new UnsupportedOperationException("Dynamic listener registration not supported.");
    }

    @Override
    public void addListener(Class<? extends EventListener> listenerClass) {
        throw new UnsupportedOperationException("Dynamic listener registration not supported.");
    }

    @Override
    public <T extends EventListener> T createListener(Class<T> clazz) {
        throw new UnsupportedOperationException("Dynamic listener creation not supported.");
    }
}
